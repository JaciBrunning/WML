plugins {
	id 'org.ysb33r.doxygen' version '0.7.0'
	id 'cpp'
	id 'google-test-test-suite'
	id 'edu.wpi.first.GradleRIO'
}

allprojects {
	plugins.withType(edu.wpi.first.toolchain.roborio.RoboRioToolchainPlugin).whenPluginAdded {
		if (project.hasProperty('no-roborio'))
			toolchainsPlugin.getByName('roboRio').optional = true
	}

	plugins.withType(NativeComponentPlugin).whenPluginAdded {
		project.model {
			binaries {
				all {
					if (it instanceof NativeBinarySpec) {
						if (project.hasProperty('no-desktop') && targetPlatform.name == edu.wpi.first.toolchain.NativePlatforms.desktop) {
							it.buildable = false
						}
						if (project.hasProperty('no-roborio') && targetPlatform.name == edu.wpi.first.toolchain.NativePlatforms.roborio) {
							it.buildable = false
						}
					}
				}
			}
		}
	}
}

subprojects {
	project.buildDir = rootProject.buildDir
}

def includeSrcInIncludeRoot = true

// Set this to true to enable desktop support.
def includeDesktopSupport = false

dependencies {
	simulation wpi.deps.sim.gui(wpi.platforms.desktop, true)
	simulation wpi.deps.sim.driverstation(wpi.platforms.desktop, true)
}

model {
	components {
		
		wmlBuildEnv(NativeExecutableSpec) { // frc user
			targetPlatform wpi.platforms.roborio
			if (includeDesktopSupport) {
				targetPlatform wpi.platforms.desktop
			}

			sources.cpp {
				source {
					srcDir 'src/main/cpp' // robot
					include '**/*.cpp', '**/*.cc'
				}

				exportedHeaders {
					srcDir 'src/main/include' // robot

					if (includeSrcInIncludeRoot) {
						srcDir 'src/main/cpp' // robot
					}
				}
			}

			binaries.all {
				lib project: ':WML-Core', library: 'WML-Core', linkage: 'shared'
				lib project: ':WML-Rev', library: 'WML-Rev', linkage: 'shared'
			}

			wpi.deps.vendor.cpp(it)
			wpi.deps.wpilib(it)
		} // frc user
	}

	testSuites {
		wmlBuildEnvTest(GoogleTestTestSuiteSpec) {
			testing $.components.wmlBuildEnv

			sources.cpp {
				source {
					srcDir 'src/test/cpp'
					include '**/*.cpp'
				}
			}

			wpi.deps.vendor.cpp(it)
			wpi.deps.wpilib(it)
			wpi.deps.googleTest(it)
		}
	}
}

wrapper {
	gradleVersion = '6.8'
}